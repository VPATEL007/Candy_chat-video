import 'dart:async';

import 'package:flutter/material.dart';
import 'package:video_chat/app/app.export.dart';

class ThemeHelper {
  static StreamController<String> controller = StreamController<String>();

  static BaseTheme theme() => _getDefaultTheme();

  static String _appTheme;

  static Stream<String> appthemeString = controller.stream;

  static Map<String, BaseTheme> _supportedThemes = {
    "light": BaseTheme(),
    "dark": DarkTheme(),
  };

  static BaseTheme _getDefaultTheme() {
    //return default strings if locale is not set

    if (_appTheme == null) return BaseTheme();

    //throw exception to notify given local is not found or not generated by the generator

    if (!_supportedThemes.containsKey(_appTheme))
      throw Exception(
          "$_appTheme is not found.\n Make sure you have added this locale in JSON file\n Try running flutter pub run build_runner");

    //return locale from map

    return _supportedThemes[_appTheme];
  }

  static void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
    controller.add(_newTheme);
  }
}

class BaseTheme {
  // Color get colorPrimary => fromHex("#ec7607");
  // Color get colorPrimary => Color(0xFF2196F3);
  Color get colorPrimary => Color(0xFF1f2f98);

  Color get bgColor => Color(0xFFDDE6E8);

  // Color get colorSecondary => Color(0xFF00BCD4);
  Color get colorSecondary => Color(0xFF4adede);

  Color get colorPrimaryLight => colorPrimary.withOpacity(0.4);

  Color get whiteColor => fromHex("#FFFFFF");

  Color get blackColor => fromHex("#000000");

  Color get appBackgroundColor => fromHex("#F9F4F5");

  Color get primarColorBG => fromHex("#10234E");

  Color get textColor => fromHex("#353535");

  // Color get bgColor => Colors.blue;

  Color get dividerColor => fromHex("#9E9E9E");

  Color get textBlackColor => fromHex("#242424");

  Color get whiteBackground => Colors.white;

  Color get textGreyColor => fromHex("#757575");

  Color get greyButtonBgColor => fromHex("#757575");

  Color get borderColor => fromHex("#CCCCCC");

  Color get errorColor => fromHex("#FF4B4B");

  Color get redColor => fromHex("#FF4B4B");

  Color get grayColor => fromHex("#F9F4F5");

  Color get lightPinkColor => fromHex("#F9F4F5");

  Color get lightPinkShadowColor => fromHex("#E7C6CE78");

  Color get shadowColor => fromHex("#4DDF9CAD");

  Color get textGray => fromHex("#9E9E9E");

  Color get colorOTPTextfieldBG => fromHex("#F5F5F5");

  // Color get toastColor => fromHex("#EFEFEF");
  Color get toastColor => fromHex("#757575");

  Color get accountTextGreyColor => fromHex("#767D7D");

  TextStyle get titleText {
    return TextStyle(
        fontSize: getFontSize(14),
        fontWeight: FontWeight.w700,
        color: textColor);
  }

  TextStyle get errorText {
    return TextStyle(
      fontSize: getFontSize(12),
      color: errorColor,
    );
  }

  TextStyle get whiteBold32 {
    return TextStyle(
        fontSize: getFontSize(32),
        fontWeight: FontWeight.w800,
        color: whiteColor);
  }

  TextStyle get black_Medium_16Text {
    return TextStyle(
      fontSize: getFontSize(16),
      fontWeight: FontWeight.w500,
      color: blackColor,
    );
  }

  TextStyle get black_Medium_14Text {
    return TextStyle(
        fontSize: getFontSize(14),
        fontWeight: FontWeight.w500,
        color: textBlackColor);
  }

  TextStyle get black_SemiBold_14Text {
    return TextStyle(
        fontSize: getFontSize(14),
        fontWeight: FontWeight.w600,
        color: textBlackColor);
  }

  TextStyle get black_SemiBold_16Text {
    return TextStyle(
        fontSize: getFontSize(16),
        fontWeight: FontWeight.w600,
        color: textBlackColor);
  }

  TextStyle get black_SemiBold_18Text {
    return TextStyle(
        fontSize: getFontSize(18),
        fontWeight: FontWeight.w600,
        color: textBlackColor);
  }

  TextStyle get grey_Medium_14Text {
    return TextStyle(
        fontSize: getFontSize(14),
        fontWeight: FontWeight.w500,
        color: textGreyColor);
  }

  TextStyle get greyNormal14 {
    return TextStyle(
        fontSize: getFontSize(14),
        fontWeight: FontWeight.w400,
        color: textGreyColor);
  }

  TextStyle get hintTextStyle {
    return TextStyle(
        fontSize: getFontSize(14),
        fontWeight: FontWeight.w500,
        color: colorPrimary.withOpacity(0.8));
  }

  TextStyle get textfieldStyle {
    return TextStyle(
        fontSize: getFontSize(16),
        fontWeight: FontWeight.w600,
        color: colorPrimary);
  }

  TextStyle get primary16Medium {
    return TextStyle(
        fontSize: getFontSize(16),
        fontWeight: FontWeight.w600,
        color: colorPrimary);
  }

  TextStyle get black_Heavy_24Text {
    return TextStyle(
        fontSize: getFontSize(24),
        fontWeight: FontWeight.w800,
        color: textBlackColor);
  }

  TextStyle get buttonTitle16TextStyle {
    return TextStyle(
      fontSize: getFontSize(16),
      fontWeight: FontWeight.bold,
      color: whiteColor,
      letterSpacing: 0.68,
    );
  }

  TextStyle get buttonTitle18TextStyle {
    return TextStyle(
      fontSize: getFontSize(18),
      fontWeight: FontWeight.bold,
      color: whiteColor,
      letterSpacing: 0.68,
    );
  }

  TextStyle get textColor26Light {
    return TextStyle(
        fontSize: getFontSize(26),
        fontWeight: FontWeight.w300,
        color: textColor);
  }

  TextStyle get textColor26Bold {
    return TextStyle(
        fontSize: getFontSize(26),
        fontWeight: FontWeight.w700,
        color: textColor);
  }

  TextStyle get primaryColor14SemiBold {
    return TextStyle(
        fontSize: getFontSize(14),
        color: colorPrimary,
        fontWeight: FontWeight.w600);
  }

  ///////////

  TextStyle get white16Normal {
    return TextStyle(
        fontSize: getFontSize(16),
        fontWeight: FontWeight.w400,
        color: whiteColor);
  }

  TextStyle get white14Normal {
    return TextStyle(
        fontSize: getFontSize(14),
        fontWeight: FontWeight.w400,
        color: whiteColor);
  }

  TextStyle get white12Normal {
    return TextStyle(
        fontSize: getFontSize(12),
        fontWeight: FontWeight.w400,
        color: whiteColor);
  }

  TextStyle get black24Semibold {
    return TextStyle(
        fontSize: getFontSize(24),
        fontWeight: FontWeight.w600,
        color: accountTextGreyColor);
  }

  TextStyle get settingMenu {
    return TextStyle(
      fontSize: getFontSize(16),
      fontWeight: FontWeight.w600,
      color: accountTextGreyColor,
    );
  }

  TextStyle get black16Medium {
    return TextStyle(
        fontSize: getFontSize(16),
        fontWeight: FontWeight.w500,
        color: textBlackColor);
  }

  TextStyle get black16Bold {
    return TextStyle(
        fontSize: getFontSize(16),
        fontWeight: FontWeight.w700,
        color: textBlackColor);
  }

  TextStyle get grey14Normal {
    return TextStyle(
        fontSize: getFontSize(14),
        color: textGray,
        fontWeight: FontWeight.normal);
  }

  TextStyle get white14Bold {
    return TextStyle(
        fontSize: getFontSize(14),
        color: whiteColor,
        fontWeight: FontWeight.bold);
  }

  TextStyle get black12Normal {
    return TextStyle(
        fontSize: getFontSize(12),
        color: blackColor,
        fontWeight: FontWeight.normal);
  }

  TextStyle get black14SemiBold {
    return TextStyle(
        fontSize: getFontSize(14),
        color: blackColor,
        fontWeight: FontWeight.w600);
  }

  TextStyle get black14Normal {
    return TextStyle(
        fontSize: getFontSize(14),
        color: blackColor,
        fontWeight: FontWeight.w400);
  }

  TextStyle get primaryColor14Normal {
    return TextStyle(
        fontSize: getFontSize(14),
        color: colorPrimary,
        fontWeight: FontWeight.w400);
  }

  TextStyle get primaryColor14bold {
    return TextStyle(
        fontSize: getFontSize(14),
        color: colorPrimary,
        fontWeight: FontWeight.bold);
  }

  TextStyle get textColor16Normal {
    return TextStyle(
        fontSize: getFontSize(16),
        fontWeight: FontWeight.w400,
        color: textColor);
  }

  TextStyle get primary20Semibold {
    return TextStyle(
        fontSize: getFontSize(20),
        color: colorPrimary,
        fontWeight: FontWeight.w600);
  }

  //=====
  TextStyle get buttonBGColor18Semibold {
    return TextStyle(
        fontSize: getFontSize(18),
        color: colorPrimary,
        fontWeight: FontWeight.w600);
  }

  TextStyle get accountTextGreyColor12Normal {
    return TextStyle(
        fontSize: getFontSize(12),
        fontWeight: FontWeight.w400,
        color: accountTextGreyColor);
  }

  TextStyle get toggleNormalText {
    return TextStyle(
        fontSize: getFontSize(16),
        color: blackColor,
        fontWeight: FontWeight.w400);
  }

  TextStyle get toggleSelectedText {
    return TextStyle(
        fontSize: getFontSize(16),
        color: colorPrimary,
        fontWeight: FontWeight.w600);
  }

  TextStyle get selectedRadioStyle {
    return TextStyle(
        fontSize: getFontSize(14),
        color: colorPrimary,
        fontWeight: FontWeight.w600);
  }

  TextStyle get unselectedRadioStyle {
    return TextStyle(
        fontSize: getFontSize(14),
        color: blackColor,
        fontWeight: FontWeight.w400);
  }
}

class DarkTheme extends BaseTheme {
  @override
  Color get colorPrimary => Colors.white;

  @override
  Color get textColor => Colors.black;

  @override
  Color get bgColor => Colors.white;

  @override
  TextStyle get titleText =>
      TextStyle(fontSize: 10, fontWeight: FontWeight.w400, color: textColor);
}

BaseTheme get appTheme => ThemeHelper.theme();
